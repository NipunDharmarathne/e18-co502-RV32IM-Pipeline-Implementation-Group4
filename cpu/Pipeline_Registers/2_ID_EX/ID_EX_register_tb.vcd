$date
	Mon May 01 11:52:07 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ID_EX_register_tb $end
$var wire 1 ! WRITE_ENABLE_OUT $end
$var wire 32 " SIGN_ZERO_EXTEND_OUT [31:0] $end
$var wire 5 # RD_OUT [4:0] $end
$var wire 32 $ PC_PLUS_4_OUT_OUT [31:0] $end
$var wire 32 % PC_DIRECT_OUT_OUT [31:0] $end
$var wire 32 & OUT2_OUT [31:0] $end
$var wire 32 ' OUT1_OUT [31:0] $end
$var wire 1 ( MUXPC_SELECT_OUT $end
$var wire 1 ) MUXJAL_SELECT_OUT $end
$var wire 1 * MUXIMM_SELECT_OUT $end
$var wire 1 + MUXDATAMEM_SELECT_OUT $end
$var wire 1 , MEM_WRITE_OUT $end
$var wire 1 - MEM_READ_OUT $end
$var wire 1 . JUMP_OUT $end
$var wire 3 / FUNCT3_OUT [2:0] $end
$var wire 1 0 BRANCH_OUT $end
$var wire 5 1 ALUOP_OUT [4:0] $end
$var reg 5 2 ALUOP_IN [4:0] $end
$var reg 1 3 BRANCH_IN $end
$var reg 1 4 BUSYWAIT $end
$var reg 1 5 CLK $end
$var reg 3 6 FUNCT3_IN [2:0] $end
$var reg 1 7 JUMP_IN $end
$var reg 1 8 MEM_READ_IN $end
$var reg 1 9 MEM_WRITE_IN $end
$var reg 1 : MUXDATAMEM_SELECT_IN $end
$var reg 1 ; MUXIMM_SELECT_IN $end
$var reg 1 < MUXJAL_SELECT_IN $end
$var reg 1 = MUXPC_SELECT_IN $end
$var reg 32 > OUT1_IN [31:0] $end
$var reg 32 ? OUT2_IN [31:0] $end
$var reg 32 @ PC_DIRECT_OUT_IN [31:0] $end
$var reg 32 A PC_PLUS_4_OUT_IN [31:0] $end
$var reg 5 B RD_IN [4:0] $end
$var reg 1 C RESET $end
$var reg 32 D SIGN_ZERO_EXTEND [31:0] $end
$var reg 1 E WRITE_ENABLE_IN $end
$scope module id_ex_register $end
$var wire 5 F ALUOP_IN [4:0] $end
$var wire 1 3 BRANCH_IN $end
$var wire 1 4 BUSYWAIT $end
$var wire 1 5 CLK $end
$var wire 3 G FUNCT3_IN [2:0] $end
$var wire 1 7 JUMP_IN $end
$var wire 1 8 MEM_READ_IN $end
$var wire 1 9 MEM_WRITE_IN $end
$var wire 1 : MUXDATAMEM_SELECT_IN $end
$var wire 1 ; MUXIMM_SELECT_IN $end
$var wire 1 < MUXJAL_SELECT_IN $end
$var wire 1 = MUXPC_SELECT_IN $end
$var wire 32 H OUT1_IN [31:0] $end
$var wire 32 I OUT2_IN [31:0] $end
$var wire 32 J PC_DIRECT_OUT_IN [31:0] $end
$var wire 32 K PC_PLUS_4_OUT_IN [31:0] $end
$var wire 5 L RD_IN [4:0] $end
$var wire 1 C RESET $end
$var wire 32 M SIGN_ZERO_EXTEND [31:0] $end
$var wire 1 E WRITE_ENABLE_IN $end
$var reg 5 N ALUOP_OUT [4:0] $end
$var reg 1 0 BRANCH_OUT $end
$var reg 3 O FUNCT3_OUT [2:0] $end
$var reg 1 . JUMP_OUT $end
$var reg 1 - MEM_READ_OUT $end
$var reg 1 , MEM_WRITE_OUT $end
$var reg 1 + MUXDATAMEM_SELECT_OUT $end
$var reg 1 * MUXIMM_SELECT_OUT $end
$var reg 1 ) MUXJAL_SELECT_OUT $end
$var reg 1 ( MUXPC_SELECT_OUT $end
$var reg 32 P OUT1_OUT [31:0] $end
$var reg 32 Q OUT2_OUT [31:0] $end
$var reg 32 R PC_DIRECT_OUT_OUT [31:0] $end
$var reg 32 S PC_PLUS_4_OUT_OUT [31:0] $end
$var reg 5 T RD_OUT [4:0] $end
$var reg 32 U SIGN_ZERO_EXTEND_OUT [31:0] $end
$var reg 1 ! WRITE_ENABLE_OUT $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b101011001 M
b10100 L
b1111100 K
b1111000 J
b1101111010 I
b1000100110 H
b110 G
b1111 F
1E
b101011001 D
0C
b10100 B
b1111100 A
b1111000 @
b1101111010 ?
b1000100110 >
1=
1<
1;
1:
19
18
17
b110 6
05
04
13
b1111 2
bx 1
x0
bx /
x.
x-
x,
x+
x*
x)
x(
bx '
bx &
bx %
bx $
bx #
bx "
x!
$end
#1
1C
#4
15
#5
0C
#8
05
#12
15
#13
b1101111010 &
b1101111010 Q
b1000100110 '
b1000100110 P
b1111100 $
b1111100 S
b101011001 "
b101011001 U
b1111000 %
b1111000 R
b10100 #
b10100 T
b1111 1
b1111 N
b110 /
b110 O
1.
10
1(
1*
1)
1,
1-
1+
1!
#16
05
#17
b101 6
b101 G
b10 B
b10 L
b1011010 ?
b1011010 I
b110010 >
b110010 H
b11000 A
b11000 K
b101101 D
b101101 M
b10100 @
b10100 J
07
03
0=
0;
b101 2
b101 F
0<
09
08
0:
0E
14
#20
15
#24
05
#28
15
#32
05
#36
15
#40
05
#44
15
#48
05
#52
15
#56
05
#60
15
#64
05
#68
15
#72
05
#76
15
#80
05
#84
15
#88
05
#92
15
#96
05
#100
15
#104
05
#108
15
#112
05
#116
15
#120
05
#124
15
